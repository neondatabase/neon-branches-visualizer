/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/projects/{project_id}/applications/vercel": {
    parameters: {
      path: {
        /** @description Neon project ID */
        project_id: string;
      };
    };
  };
  "/applications/oauth/{client_id}": {
    parameters: {
      path: {
        client_id: string;
      };
    };
  };
  "/api_keys": {
    /**
     * Get a list of API keys 
     * @description Retrieves the API keys for your Neon account.
     * The response does not include API key tokens. A token is only provided when creating an API key.
     * API keys can also be managed in the Neon Console.
     * For more information, see [Manage API keys](https://neon.tech/docs/manage/api-keys/).
     */
    get: operations["listApiKeys"];
    /**
     * Create an API key 
     * @description Creates an API key.
     * The `key_name` is a user-specified name for the key.
     * This method returns an `id` and `key`. The `key` is a randomly generated, 64-bit token required to access the Neon API.
     * API keys can also be managed in the Neon Console.
     * See [Manage API keys](https://neon.tech/docs/manage/api-keys/).
     */
    post: operations["createApiKey"];
  };
  "/api_keys/{key_id}": {
    /**
     * Revoke an API key 
     * @description Revokes the specified API key.
     * An API key that is no longer needed can be revoked.
     * This action cannot be reversed.
     * You can obtain `key_id` values by listing the API keys for your Neon account.
     * API keys can also be managed in the Neon Console.
     * See [Manage API keys](https://neon.tech/docs/manage/api-keys/).
     */
    delete: operations["revokeApiKey"];
  };
  "/projects/{project_id}/operations/{operation_id}": {
    /**
     * Get operation details 
     * @description Retrieves details for the specified operation.
     * An operation is an action performed on a Neon project resource.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain a `operation_id` by listing operations for the project.
     */
    get: operations["getProjectOperation"];
    parameters: {
      path: {
        /** @description The Neon project ID */
        project_id: string;
        /** @description The operation ID */
        operation_id: string;
      };
    };
  };
  "/projects": {
    /**
     * Get a list of projects 
     * @description Retrieves a list of projects for the Neon account.
     * A project is the top-level object in the Neon object hierarchy.
     * For more information, see [Manage projects](https://neon.tech/docs/manage/projects/).
     */
    get: operations["listProjects"];
    /**
     * Create a project 
     * @description Creates a Neon project.
     * A project is the top-level object in the Neon object hierarchy.
     * Plan limits define how many projects you can create.
     * Neon's Free plan permits one project per Neon account.
     * For more information, see [Manage projects](https://neon.tech/docs/manage/projects/).
     * 
     * You can specify a region and PostgreSQL version in the request body.
     * Neon currently supports PostgreSQL 14 and 15.
     * For supported regions and `region_id` values, see [Regions](https://neon.tech/docs/introduction/regions/).
     */
    post: operations["createProject"];
  };
  "/projects/{project_id}": {
    /**
     * Get project details 
     * @description Retrieves information about the specified project.
     * A project is the top-level object in the Neon object hierarchy.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     */
    get: operations["getProject"];
    /**
     * Delete a project 
     * @description Deletes the specified project.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * Deleting a project is a permanent action.
     * Deleting a project also deletes endpoints, branches, databases, and users that belong to the project.
     */
    delete: operations["deleteProject"];
    /**
     * Update a project 
     * @description Updates the specified project.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * Neon permits updating the project name only.
     */
    patch: operations["updateProject"];
    parameters: {
      path: {
        /** @description The Neon project ID */
        project_id: string;
      };
    };
  };
  "/projects/{project_id}/operations": {
    /**
     * Get a list of operations 
     * @description Retrieves a list of operations for the specified Neon project.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * The number of operations returned can be large.
     * To paginate the response, issue an initial request with a `limit` value.
     * Then, add the `cursor` value that was returned in the response to the next request.
     */
    get: operations["listProjectOperations"];
  };
  "/projects/{project_id}/saved_queries": {
    parameters: {
      path: {
        project_id: string;
      };
    };
  };
  "/projects/{project_id}/permissions": {
    parameters: {
      path: {
        project_id: string;
      };
    };
  };
  "/projects/{project_id}/permissions/{permission_id}": {
    parameters: {
      path: {
        project_id: string;
        permission_id: string;
      };
    };
  };
  "/saved_queries/{saved_query_id}": {
    parameters: {
      path: {
        saved_query_id: number;
      };
    };
  };
  "/projects/{project_id}/branches": {
    /**
     * Get a list of branches 
     * @description Retrieves a list of branches for the specified project.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * 
     * Each Neon project has a root branch named `main`.
     * A `branch_id` value has a `br-` prefix.
     * A project may contain child branches that were branched from `main` or from another branch.
     * A parent branch is identified by the `parent_id` value, which is the `id` of the parent branch.
     * For related information, see [Manage branches](https://neon.tech/docs/manage/branches/).
     */
    get: operations["listProjectBranches"];
    /**
     * Create a branch 
     * @description Creates a branch in the specified project.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * 
     * This method does not require a request body, but you can specify one to create an endpoint for the branch or to select a non-default parent branch.
     * The default behavior is to create a branch from the project's root branch (`main`) with no endpoint, and the branch name is auto-generated.
     * For related information, see [Manage branches](https://neon.tech/docs/manage/branches/).
     */
    post: operations["createProjectBranch"];
    parameters: {
      path: {
        /** @description The Neon project ID */
        project_id: string;
      };
    };
  };
  "/projects/{project_id}/branches/{branch_id}": {
    /**
     * Get branch details 
     * @description Retrieves information about the specified branch.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain a `branch_id` by listing the project's branches.
     * A `branch_id` value has a `br-` prefix.
     * 
     * Each Neon project has a root branch named `main`.
     * A project may contain child branches that were branched from `main` or from another branch.
     * A parent branch is identified by a `parent_id` value, which is the `id` of the parent branch.
     * For related information, see [Manage branches](https://neon.tech/docs/manage/branches/).
     */
    get: operations["getProjectBranch"];
    /**
     * Delete a branch 
     * @description Deletes the specified branch from a project, and places
     * all endpoints into an idle state, breaking existing client connections.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain a `branch_id` by listing the project's branches.
     * For related information, see [Manage branches](https://neon.tech/docs/manage/branches/).
     * 
     * When a successful response status is received, the endpoints are still active,
     * and the branch is not yet deleted from storage.
     * The deletion occurs after all operations finish.
     * You cannot delete a branch if it is the only remaining branch in the project.
     * A project must have at least one branch.
     */
    delete: operations["deleteProjectBranch"];
    /**
     * Update a branch 
     * @description Updates the specified branch. Only changing the branch name is supported.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `branch_id` by listing the project's branches.
     * For more information, see [Manage branches](https://neon.tech/docs/manage/branches/).
     */
    patch: operations["updateProjectBranch"];
    parameters: {
      path: {
        /** @description The Neon project ID */
        project_id: string;
        /** @description The branch ID */
        branch_id: string;
      };
    };
  };
  "/projects/{project_id}/branches/{branch_id}/set_as_primary": {
    /**
     * Set the branch as the primary branch of a project 
     * @description The primary mark is automatically removed from the previous primary branch.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `branch_id` by listing the project's branches.
     * For more information, see [Manage branches](https://neon.tech/docs/manage/branches/).
     */
    post: operations["setPrimaryProjectBranch"];
    parameters: {
      path: {
        /** @description The Neon project ID */
        project_id: string;
        /** @description The branch ID */
        branch_id: string;
      };
    };
  };
  "/projects/{project_id}/branches/{branch_id}/endpoints": {
    /**
     * Get a list of branch endpoints 
     * @description Retrieves a list of endpoints for the specified branch.
     * Currently, Neon permits only one endpoint per branch.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `branch_id` by listing the project's branches.
     */
    get: operations["listProjectBranchEndpoints"];
    parameters: {
      path: {
        /** @description The Neon project ID */
        project_id: string;
        /** @description The branch ID */
        branch_id: string;
      };
    };
  };
  "/projects/{project_id}/branches/{branch_id}/databases": {
    /**
     * Get a list of databases 
     * @description Retrieves a list of databases for the specified branch.
     * A branch can have multiple databases.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `branch_id` by listing the project's branches.
     * For related information, see [Manage databases](https://neon.tech/docs/manage/databases/).
     */
    get: operations["listProjectBranchDatabases"];
    /**
     * Create a database 
     * @description Creates a database in the specified branch.
     * A branch can have multiple databases.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `branch_id` by listing the project's branches.
     * For related information, see [Manage databases](https://neon.tech/docs/manage/databases/).
     */
    post: operations["createProjectBranchDatabase"];
    parameters: {
      path: {
        /** @description The Neon project ID */
        project_id: string;
        /** @description The branch ID */
        branch_id: string;
      };
    };
  };
  "/projects/{project_id}/branches/{branch_id}/databases/{database_name}": {
    /**
     * Get database details 
     * @description Retrieves information about the specified database.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `branch_id` and `database_name` by listing branch's databases.
     * For related information, see [Manage databases](https://neon.tech/docs/manage/databases/).
     */
    get: operations["getProjectBranchDatabase"];
    /**
     * Delete a database 
     * @description Deletes the specified database from the branch.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `branch_id` and `database_name` by listing branch's databases.
     * For related information, see [Manage databases](https://neon.tech/docs/manage/databases/).
     */
    delete: operations["deleteProjectBranchDatabase"];
    /**
     * Update a database 
     * @description Updates the specified database in the branch.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `branch_id` and `database_name` by listing the branch's databases.
     * For related information, see [Manage databases](https://neon.tech/docs/manage/databases/).
     */
    patch: operations["updateProjectBranchDatabase"];
    parameters: {
      path: {
        /** @description The Neon project ID */
        project_id: string;
        /** @description The branch ID */
        branch_id: string;
        /** @description The database name */
        database_name: string;
      };
    };
  };
  "/projects/{project_id}/branches/{branch_id}/roles": {
    /**
     * Get a list of roles 
     * @description Retrieves a list of roles from the specified branch.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `branch_id` by listing the project's branches.
     * In Neon, the terms "role" and "user" are synonymous.
     * For related information, see [Manage roles](https://neon.tech/docs/manage/roles/).
     */
    get: operations["listProjectBranchRoles"];
    /**
     * Create a role 
     * @description Creates a role in the specified branch.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `branch_id` by listing the project's branches.
     * In Neon, the terms "role" and "user" are synonymous.
     * For related information, see [Manage roles](https://neon.tech/docs/manage/roles/).
     * 
     * Connections established to the active read-write endpoint will be dropped.
     * If the read-write endpoint is idle, the endpoint becomes active for a short period of time and is suspended afterward.
     */
    post: operations["createProjectBranchRole"];
    parameters: {
      path: {
        /** @description The Neon project ID */
        project_id: string;
        /** @description The branch ID */
        branch_id: string;
      };
    };
  };
  "/projects/{project_id}/branches/{branch_id}/roles/{role_name}": {
    /**
     * Get role details 
     * @description Retrieves details about the specified role.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `branch_id` by listing the project's branches.
     * You can obtain the `role_name` by listing the roles for a branch.
     * In Neon, the terms "role" and "user" are synonymous.
     * For related information, see [Manage roles](https://neon.tech/docs/manage/roles/).
     */
    get: operations["getProjectBranchRole"];
    /**
     * Delete a role 
     * @description Deletes the specified role from the branch.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `branch_id` by listing the project's branches.
     * You can obtain the `role_name` by listing the roles for a branch.
     * In Neon, the terms "role" and "user" are synonymous.
     * For related information, see [Manage roles](https://neon.tech/docs/manage/roles/).
     */
    delete: operations["deleteProjectBranchRole"];
    parameters: {
      path: {
        /** @description The Neon project ID */
        project_id: string;
        /** @description The branch ID */
        branch_id: string;
        /** @description The role name */
        role_name: string;
      };
    };
  };
  "/projects/{project_id}/branches/{branch_id}/roles/{role_name}/reveal_password": {
    /**
     * Get role password 
     * @description Retrieves password of the specified role if possible.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `branch_id` by listing the project's branches.
     * You can obtain the `role_name` by listing the roles for a branch.
     * In Neon, the terms "role" and "user" are synonymous.
     * For related information, see [Manage roles](https://neon.tech/docs/manage/roles/).
     */
    get: operations["getProjectBranchRolePassword"];
    parameters: {
      path: {
        /** @description The Neon project ID */
        project_id: string;
        /** @description The branch ID */
        branch_id: string;
        /** @description The role name */
        role_name: string;
      };
    };
  };
  "/projects/{project_id}/branches/{branch_id}/roles/{role_name}/reset_password": {
    /**
     * Reset the role password 
     * @description Resets the password for the specified role.
     * Returns a new password and operations. The new password is ready to use when the last operation finishes.
     * The old password remains valid until last operation finishes.
     * Connections to the read-write endpoint are dropped. If idle,
     * the read-write endpoint becomes active for a short period of time.
     * 
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `branch_id` by listing the project's branches.
     * You can obtain the `role_name` by listing the roles for a branch.
     * In Neon, the terms "role" and "user" are synonymous.
     * For related information, see [Manage roles](https://neon.tech/docs/manage/roles/).
     */
    post: operations["resetProjectBranchRolePassword"];
    parameters: {
      path: {
        /** @description The Neon project ID */
        project_id: string;
        /** @description The branch ID */
        branch_id: string;
        /** @description The role nam */
        role_name: string;
      };
    };
  };
  "/projects/{project_id}/endpoints": {
    /**
     * Get a list of endpoints 
     * @description Retrieves a list of endpoints for the specified project.
     * An endpoint is a Neon compute instance.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * For more information about endpoints, see [Manage endpoints](https://neon.tech/docs/manage/endpoints/).
     */
    get: operations["listProjectEndpoints"];
    /**
     * Create an endpoint 
     * @description Creates an endpoint for the specified branch.
     * An endpoint is a Neon compute instance.
     * There is a maximum of one endpoint per branch.
     * If the specified branch already has an endpoint, the operation fails.
     * 
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain `branch_id` by listing the project's branches.
     * A `branch_id` has a `br-` prefix.
     * Currently, only the `read_write` endpoint type is supported.
     * For supported regions and `region_id` values, see [Regions](https://neon.tech/docs/introduction/regions/).
     * For more information about endpoints, see [Manage endpoints](https://neon.tech/docs/manage/endpoints/).
     */
    post: operations["createProjectEndpoint"];
    parameters: {
      path: {
        /** @description The Neon project ID */
        project_id: string;
      };
    };
  };
  "/projects/{project_id}/endpoints/{endpoint_id}": {
    /**
     * Get an endpoint 
     * @description Retrieves information about the specified endpoint.
     * An endpoint is a Neon compute instance.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain an `endpoint_id` by listing your project's endpoints.
     * An `endpoint_id` has an `ep-` prefix.
     * For more information about endpoints, see [Manage endpoints](https://neon.tech/docs/manage/endpoints/).
     */
    get: operations["getProjectEndpoint"];
    /**
     * Delete an endpoint 
     * @description Delete the specified endpoint.
     * An endpoint is a Neon compute instance.
     * Deleting an endpoint drops existing network connections to the endpoint.
     * The deletion is completed when last operation in the chain finishes successfully.
     * 
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain an `endpoint_id` by listing your project's endpoints.
     * An `endpoint_id` has an `ep-` prefix.
     * For more information about endpoints, see [Manage endpoints](https://neon.tech/docs/manage/endpoints/).
     */
    delete: operations["deleteProjectEndpoint"];
    /**
     * Update an endpoint 
     * @description Updates the specified endpoint. Currently, only changing the associated branch is supported.
     * The branch that you specify cannot have an existing endpoint.
     * 
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain an `endpoint_id` and `branch_id` by listing your project's endpoints.
     * An `endpoint_id` has an `ep-` prefix. A `branch_id` has a `br-` prefix.
     * For more information about endpoints, see [Manage endpoints](https://neon.tech/docs/manage/endpoints/).
     * 
     * If the returned list of operations is not empty, the endpoint is not ready to use.
     * The client must wait for the last operation to finish before using the endpoint.
     * If the endpoint was idle before the update, the endpoint becomes active for a short period of time,
     * and the control plane suspends it again after the update.
     */
    patch: operations["updateProjectEndpoint"];
    parameters: {
      path: {
        /** @description The Neon project ID */
        project_id: string;
        /** @description The endpoint ID */
        endpoint_id: string;
      };
    };
  };
  "/projects/{project_id}/endpoints/{endpoint_id}/start": {
    /**
     * Start an endpoint 
     * @description Starts an endpoint. The endpoint is ready to use
     * after the last operation in chain finishes successfully.
     * 
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain an `endpoint_id` by listing your project's endpoints.
     * An `endpoint_id` has an `ep-` prefix.
     * For more information about endpoints, see [Manage endpoints](https://neon.tech/docs/manage/endpoints/).
     */
    post: operations["startProjectEndpoint"];
  };
  "/projects/{project_id}/endpoints/{endpoint_id}/suspend": {
    /**
     * Suspend an endpoint 
     * @description Suspend the specified endpoint
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain an `endpoint_id` by listing your project's endpoints.
     * An `endpoint_id` has an `ep-` prefix.
     * For more information about endpoints, see [Manage endpoints](https://neon.tech/docs/manage/endpoints/).
     */
    post: operations["suspendProjectEndpoint"];
    parameters: {
      path: {
        /** @description The Neon project ID */
        project_id: string;
        /** @description The endpoint ID */
        endpoint_id: string;
      };
    };
  };
  "/projects/{project_id}/endpoints/{endpoint_id}/passwordless_auth": {
    parameters: {
      path: {
        project_id: string;
        endpoint_id: string;
      };
    };
  };
  "/consumption/projects": {
    /**
     * Rerives a list consumption metrics for each project 
     * @description This is a preview API and is subject to changes in the future.
     * 
     * Retrieves a list project consumption metrics for each project for the current billing period.
     */
    get: operations["listProjectsConsumption"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ComputeUnit: number;
    /**
     * @description The Neon compute provisioner. Select the `k8s-neonvm` provisioner to enable autoscaling.
     *  
     * @enum {string}
     */
    Provisioner: "k8s-pod" | "k8s-neonvm";
    PaginationResponse: {
      pagination?: components["schemas"]["Pagination"];
    };
    /**
     * @description Cursor based pagination is used. The user must pass the cursor as is to the backend.
     * For more information about cursor based pagination, see
     * https://learn.microsoft.com/en-us/ef/core/querying/pagination#keyset-pagination
     *  
     * @example {
     *   "cursor": "2022-12-07T00:45:05.262011Z"
     * }
     */
    Pagination: {
      cursor: string;
    };
    /** @description Empty response. */
    EmptyResponse: Record<string, never>;
    ApiKeyCreateRequest: {
      /** @description A user-specified API key name. This value is required when creating an API key. */
      key_name: string;
    };
    ApiKeyCreateResponse: {
      /**
       * Format: int64 
       * @description The API key ID
       */
      id: number;
      /** @description The generated 64-bit token required to access the Neon API */
      key: string;
    };
    ApiKeyRevokeResponse: {
      /**
       * Format: int64 
       * @description The API key ID
       */
      id: number;
      /** @description The user-specified API key name */
      name: string;
      /** @description A `true` or `false` value indicating whether the API key is revoked */
      revoked: boolean;
      /**
       * Format: date-time 
       * @description A timestamp indicating when the API was last used
       */
      last_used_at?: string | null;
      /** @description The IP address from which the API key was last used */
      last_used_from_addr: string;
    };
    ApiKeysListResponseItem: {
      /**
       * Format: int64 
       * @description The API key ID
       */
      id: number;
      /** @description The user-specified API key name */
      name: string;
      /**
       * Format: date-time 
       * @description A timestamp indicating when the API key was created
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description A timestamp indicating when the API was last used
       */
      last_used_at?: string | null;
      /** @description The IP address from which the API key was last used */
      last_used_from_addr: string;
    };
    /**
     * @example [
     *   {
     *     "id": "a07f8772-1877-4da9-a939-3a3ae62d1d8d",
     *     "project_id": "spring-example-302709",
     *     "branch_id": "br-wispy-meadow-118737",
     *     "endpoint_id": "ep-silent-smoke-806639",
     *     "action": "create_branch",
     *     "status": "running",
     *     "failures_count": 0,
     *     "created_at": "2022-11-08T23:33:16Z",
     *     "updated_at": "2022-11-08T23:33:20Z"
     *   },
     *   {
     *     "id": "d8ac46eb-a757-42b1-9907-f78322ee394e",
     *     "project_id": "spring-example-302709",
     *     "branch_id": "br-wispy-meadow-118737",
     *     "endpoint_id": "ep-silent-smoke-806639",
     *     "action": "start_compute",
     *     "status": "finished",
     *     "failures_count": 0,
     *     "created_at": "2022-11-15T20:02:00Z",
     *     "updated_at": "2022-11-15T20:02:02Z"
     *   }
     * ]
     */
    Operation: {
      /**
       * Format: uuid 
       * @description The operation ID
       */
      id: string;
      /** @description The Neon project ID */
      project_id: string;
      /** @description The branch ID */
      branch_id?: string;
      /** @description The endpoint ID */
      endpoint_id?: string;
      action: components["schemas"]["OperationAction"];
      status: components["schemas"]["OperationStatus"];
      /** @description The error that occured */
      error?: string;
      /**
       * Format: int32 
       * @description The number of times the operation failed
       */
      failures_count: number;
      /**
       * Format: date-time 
       * @description A timestamp indicating when the operation was last retried
       */
      retry_at?: string;
      /**
       * Format: date-time 
       * @description A timestamp indicating when the operation was created
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description A timestamp indicating when the operation status was last updated
       */
      updated_at: string;
    };
    OperationResponse: {
      operation: components["schemas"]["Operation"];
    };
    OperationsResponse: {
      operations: (components["schemas"]["Operation"])[];
    };
    /**
     * @description The action performed by the operation 
     * @enum {string}
     */
    OperationAction: "create_compute" | "create_timeline" | "start_compute" | "suspend_compute" | "apply_config" | "check_availability" | "delete_timeline" | "create_branch" | "tenant_ignore" | "tenant_attach" | "tenant_detach" | "tenant_reattach" | "replace_safekeeper" | "disable_maintenance" | "apply_storage_config";
    /**
     * @description The status of the operation 
     * @enum {string}
     */
    OperationStatus: "running" | "finished" | "failed" | "scheduling";
    /**
     * @description Essential data about the project. Full data is available at the getProject endpoint.
     *  
     * @example {
     *   "id": "spring-example-302709",
     *   "platform_id": "aws",
     *   "region_id": "aws-us-east-2",
     *   "name": "spring-example-302709",
     *   "provisioner": "k8s-pod",
     *   "pg_version": 15,
     *   "proxy_host": "us-east-2.aws.neon.tech",
     *   "store_passwords": true,
     *   "creation_source": "console",
     *   "created_at": "2022-12-13T01:30:55Z",
     *   "updated_at": "2022-12-13T01:30:55Z"
     * }
     */
    ProjectListItem: {
      /** @description The project ID */
      id: string;
      /** @description The cloud platform identifier. Currently, only AWS is supported, for which the identifier is `aws`. */
      platform_id: string;
      /** @description The region identifier */
      region_id: string;
      /** @description The project name */
      name: string;
      provisioner: components["schemas"]["Provisioner"];
      default_endpoint_settings?: components["schemas"]["DefaultEndpointSettings"];
      settings?: components["schemas"]["ProjectSettingsData"];
      pg_version: components["schemas"]["PgVersion"];
      /** @description The proxy host for the project. This value combines the `region_id`, the `platform_id`, and the Neon domain (`neon.tech`). */
      proxy_host: string;
      /**
       * Format: int64 
       * @description The logical size limit for a branch. The value is in MiB.
       */
      branch_logical_size_limit: number;
      /**
       * Format: int64 
       * @description The logical size limit for a branch. The value is in B.
       */
      branch_logical_size_limit_bytes: number;
      /** @description Whether or not passwords are stored for roles in the Neon project. Storing passwords facilitates access to Neon features that require authorization. */
      store_passwords: boolean;
      /**
       * Format: int64 
       * @description Control plane observed endpoints of this project being active this amount of wall-clock time.
       */
      active_time: number;
      /**
       * Format: int64 
       * @deprecated 
       * @description DEPRECATED, use data from the getProject endpoint instead.
       */
      cpu_used_sec: number;
      /**
       * Format: date-time 
       * @description A timestamp indicating when project maintenance begins. If set, the project is placed into maintenance mode at this time.
       */
      maintenance_starts_at?: string;
      /** @description The project creation source */
      creation_source: string;
      /**
       * Format: date-time 
       * @description A timestamp indicating when the project was created
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description A timestamp indicating when the project was last updated
       */
      updated_at: string;
      /**
       * Format: int64 
       * @description Experimental. Do not use this field yet.
       * The data storage size in bytes.
       */
      synthetic_storage_size?: number;
      /**
       * Format: date-time 
       * @deprecated 
       * @description DEPRECATED. Use `consumption_period_end` from the getProject endpoint instead.
       * A timestamp indicating when the project quota resets
       */
      quota_reset_at?: string;
      owner_id: string;
      owner?: components["schemas"]["ProjectOwnerData"];
    };
    /**
     * @example {
     *   "id": "spring-example-302709",
     *   "platform_id": "aws",
     *   "region_id": "aws-us-east-2",
     *   "name": "spring-example-302709",
     *   "provisioner": "k8s-pod",
     *   "pg_version": 15,
     *   "proxy_host": "us-east-2.aws.neon.tech",
     *   "store_passwords": true,
     *   "creation_source": "console",
     *   "history_retention_seconds": 604800,
     *   "created_at": "2022-12-13T01:30:55Z",
     *   "updated_at": "2022-12-13T01:30:55Z"
     * }
     */
    Project: {
      /**
       * Format: int64 
       * @description Bytes-Hour. Project consumed that much storage hourly during the billing period. The value has some lag.
       * The value is reset at the beginning of each billing period.
       */
      data_storage_bytes_hour: number;
      /**
       * Format: int64 
       * @description Bytes. Egress traffic from the Neon cloud to the client for given project over the billing period.
       * Includes deleted endpoints. The value has some lag. The value is reset at the beginning of each billing period.
       */
      data_transfer_bytes: number;
      /**
       * Format: int64 
       * @description Bytes. Amount of WAL that travelled through storage for given project across all branches.
       * The value has some lag. The value is reset at the beginning of each billing period.
       */
      written_data_bytes: number;
      /**
       * Format: int64 
       * @description Seconds. The number of CPU seconds used by the project's compute endpoints, including compute endpoints that have been deleted.
       * The value has some lag. The value is reset at the beginning of each billing period.
       * Examples:
       * 1. An endpoint that uses 1 CPU for 1 second is equal to `compute_time=1`.
       * 2. An endpoint that uses 2 CPUs simultaneously for 1 second is equal to `compute_time=2`.
       */
      compute_time_seconds: number;
      /**
       * Format: int64 
       * @description Seconds. Control plane observed endpoints of this project being active this amount of wall-clock time.
       * The value has some lag.
       * The value is reset at the beginning of each billing period.
       */
      active_time_seconds: number;
      /**
       * Format: int64 
       * @deprecated 
       * @description DEPRECATED, use compute_time instead.
       */
      cpu_used_sec: number;
      /** @description The project ID */
      id: string;
      /** @description The cloud platform identifier. Currently, only AWS is supported, for which the identifier is `aws`. */
      platform_id: string;
      /** @description The region identifier */
      region_id: string;
      /** @description The project name */
      name: string;
      provisioner: components["schemas"]["Provisioner"];
      default_endpoint_settings?: components["schemas"]["DefaultEndpointSettings"];
      settings?: components["schemas"]["ProjectSettingsData"];
      pg_version: components["schemas"]["PgVersion"];
      /** @description The proxy host for the project. This value combines the `region_id`, the `platform_id`, and the Neon domain (`neon.tech`). */
      proxy_host: string;
      /**
       * Format: int64 
       * @description The logical size limit for a branch. The value is in MiB.
       */
      branch_logical_size_limit: number;
      /**
       * Format: int64 
       * @description The logical size limit for a branch. The value is in B.
       */
      branch_logical_size_limit_bytes: number;
      /** @description Whether or not passwords are stored for roles in the Neon project. Storing passwords facilitates access to Neon features that require authorization. */
      store_passwords: boolean;
      /**
       * Format: date-time 
       * @description A timestamp indicating when project maintenance begins. If set, the project is placed into maintenance mode at this time.
       */
      maintenance_starts_at?: string;
      /** @description The project creation source */
      creation_source: string;
      /**
       * Format: int64 
       * @description The number of seconds to retain point-in-time restore (PITR) backup history for this project.
       */
      history_retention_seconds: number;
      /**
       * Format: date-time 
       * @description A timestamp indicating when the project was created
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description A timestamp indicating when the project was last updated
       */
      updated_at: string;
      /**
       * Format: int64 
       * @description Experimental. Do not use this field yet.
       * The data storage size in bytes.
       */
      synthetic_storage_size?: number;
      /**
       * Format: date-time 
       * @description A date-time indicating when Neon Cloud started measuring consumption for current consumption period.
       */
      consumption_period_start: string;
      /**
       * Format: date-time 
       * @description A date-time indicating when Neon Cloud plans to stop measuring consumption for current consumption period.
       */
      consumption_period_end: string;
      /**
       * Format: date-time 
       * @deprecated 
       * @description DEPRECATED. Use `consumption_period_end` from the getProject endpoint instead.
       * A timestamp indicating when the project quota resets
       */
      quota_reset_at?: string;
      owner_id: string;
      owner?: components["schemas"]["ProjectOwnerData"];
    };
    ProjectCreateRequest: {
      project: {
        settings?: components["schemas"]["ProjectSettingsData"];
        /** @description The project name */
        name?: string;
        branch?: {
          /** @description The branch name. If not specified, the default branch name will be used. */
          name?: string;
          /** @description The role name. If not specified, the default role name will be used. */
          role_name?: string;
          /** @description The database name. If not specified, the default database name will be used. */
          database_name?: string;
        };
        /**
         * @description The minimum number of Compute Units. The minimum value is `0.25`.
         * See [Compute size and Autoscaling configuration](https://neon.tech/docs/manage/endpoints#compute-size-and-autoscaling-configuration)
         * for more information.
         */
        autoscaling_limit_min_cu?: components["schemas"]["ComputeUnit"];
        /**
         * @description The maximum number of Compute Units. See [Compute size and Autoscaling configuration](https://neon.tech/docs/manage/endpoints#compute-size-and-autoscaling-configuration)
         * for more information.
         */
        autoscaling_limit_max_cu?: components["schemas"]["ComputeUnit"];
        provisioner?: components["schemas"]["Provisioner"];
        /** @description The region identifier. Refer to our [Regions](https://neon.tech/docs/introduction/regions) documentation for supported regions. Values are specified in this format: `aws-us-east-1` */
        region_id?: string;
        default_endpoint_settings?: components["schemas"]["PgSettingsData"];
        pg_version?: components["schemas"]["PgVersion"];
        /** @description Whether or not passwords are stored for roles in the Neon project. Storing passwords facilitates access to Neon features that require authorization. */
        store_passwords?: boolean;
        /**
         * Format: int64 
         * @description The number of seconds to retain the point-in-time restore (PITR) backup history for this project.
         * The default is 604800 seconds (7 days).
         */
        history_retention_seconds?: number;
      };
    };
    ProjectUpdateRequest: {
      project: {
        settings?: components["schemas"]["ProjectSettingsData"];
        /** @description The project name */
        name?: string;
        default_endpoint_settings?: components["schemas"]["PgSettingsData"];
        /**
         * Format: int64 
         * @description The number of seconds to retain the point-in-time restore (PITR) backup history for this project.
         * The default is 604800 seconds (7 days).
         */
        history_retention_seconds?: number;
      };
    };
    ProjectSettingsData: {
      quota?: components["schemas"]["ProjectQuota"];
    };
    ProjectResponse: {
      project: components["schemas"]["Project"];
    };
    ProjectsResponse: {
      projects: (components["schemas"]["ProjectListItem"])[];
    };
    ProjectsConsumptionResponse: {
      projects: (components["schemas"]["ProjectConsumption"])[];
    };
    ProjectConsumption: {
      /** @description The project ID */
      id: string;
      /**
       * Format: int64 
       * @description Bytes-Hour. Project consumed that much storage hourly during the billing period. The value has some lag.
       * The value is reset at the beginning of each billing period.
       */
      data_storage_bytes_hour: number;
      /**
       * Format: int64 
       * @description Bytes. Current space occupied by project in the storage. The value has some lag.
       */
      synthetic_storage_size: number;
      /**
       * Format: int64 
       * @description Bytes. Egress traffic from the Neon cloud to the client for given project over the billing period.
       * Includes deleted endpoints. The value has some lag. The value is reset at the beginning of each billing period.
       */
      data_transfer_bytes: number;
      /**
       * Format: int64 
       * @description Bytes. Amount of WAL that travelled through storage for given project across all branches.
       * The value has some lag. The value is reset at the beginning of each billing period.
       */
      written_data_bytes: number;
      /**
       * Format: int64 
       * @description Seconds. The number of CPU seconds used by the project's compute endpoints, including compute endpoints that have been deleted.
       * The value has some lag. The value is reset at the beginning of each billing period.
       * Examples:
       * 1. An endpoint that uses 1 CPU for 1 second is equal to `compute_time=1`.
       * 2. An endpoint that uses 2 CPUs simultaneously for 1 second is equal to `compute_time=2`.
       */
      compute_time_seconds: number;
      /**
       * Format: int64 
       * @description Seconds. Control plane observed endpoints of this project being active this amount of wall-clock time.
       * The value has some lag.
       * The value is reset at the beginning of each billing period.
       */
      active_time_seconds: number;
      /**
       * Format: date-time 
       * @description A timestamp indicating when the project was last updated
       */
      updated_at: string;
    };
    ProjectLimits: {
      limits: {
        /** Format: int64 */
        active_time: number;
        max_projects: number;
        max_branches: number;
        /** Format: float64 */
        max_autoscaling_cu: number;
        /** Format: int64 */
        cpu_seconds: number;
        max_active_endpoints: number;
        max_read_only_endpoints: number;
      };
      [key: string]: unknown;
    };
    /**
     * @example {
     *   "id": "br-wispy-meadow-118737",
     *   "project_id": "spring-example-302709",
     *   "parent_id": "br-aged-salad-637688",
     *   "parent_lsn": "0/1DE2850",
     *   "name": "dev2",
     *   "current_state": "ready",
     *   "creation_source": "console",
     *   "created_at": "2022-11-30T19:09:48Z",
     *   "updated_at": "2022-12-01T19:53:05Z",
     *   "primary": true
     * }
     */
    Branch: {
      /** @description The branch ID. This value is generated when a branch is created. A `branch_id` value has a `br` prefix. For example: `br-small-term-683261`. */
      id: string;
      /** @description The ID of the project to which the branch belongs */
      project_id: string;
      /** @description The `branch_id` of the parent branch */
      parent_id?: string;
      /** @description The Log Sequence Number (LSN) on the parent branch from which this branch was created */
      parent_lsn?: string;
      /**
       * Format: date-time 
       * @description The point in time on the parent branch from which this branch was created
       */
      parent_timestamp?: string;
      /** @description The branch name */
      name: string;
      current_state: components["schemas"]["BranchState"];
      pending_state?: components["schemas"]["BranchState"];
      /**
       * Format: int64 
       * @description The logical size of the branch, in bytes
       */
      logical_size?: number;
      /** @description The branch creation source */
      creation_source: string;
      /** @description Whether the branch is the project's primary branch */
      primary: boolean;
      /**
       * Format: int64 
       * @deprecated 
       * @description CPU seconds used by all the endpoints of the branch, including deleted ones.
       * This value is reset at the beginning of each billing period.
       * Examples:
       * 1. A branch that uses 1 CPU for 1 second is equal to `cpu_used_sec=1`.
       * 2. A branch that uses 2 CPUs simultaneously for 1 second is equal to `cpu_used_sec=2`.
       */
      cpu_used_sec: number;
      /** Format: int64 */
      compute_time_seconds: number;
      /** Format: int64 */
      active_time_seconds: number;
      /** Format: int64 */
      written_data_bytes: number;
      /** Format: int64 */
      data_transfer_bytes: number;
      /**
       * Format: date-time 
       * @description A timestamp indicating when the branch was created
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description A timestamp indicating when the branch was last updated
       */
      updated_at: string;
    };
    /**
     * @description The branch state 
     * @enum {string}
     */
    BranchState: "init" | "ready";
    BranchCreateRequestEndpointOptions: {
      type: components["schemas"]["EndpointType"];
      /**
       * @description The minimum number of Compute Units. The minimum value is `0.25`.
       *     See [Compute size and Autoscaling configuration](https://neon.tech/docs/manage/endpoints#compute-size-and-autoscaling-configuration)
       *     for more information.
       */
      autoscaling_limit_min_cu?: components["schemas"]["ComputeUnit"];
      /**
       * @description The maximum number of Compute Units.
       *     See [Compute size and Autoscaling configuration](https://neon.tech/docs/manage/endpoints#compute-size-and-autoscaling-configuration)
       *     for more information.
       */
      autoscaling_limit_max_cu?: components["schemas"]["ComputeUnit"];
      provisioner?: components["schemas"]["Provisioner"];
      suspend_timeout_seconds?: components["schemas"]["SuspendTimeoutSeconds"];
    };
    BranchCreateRequest: {
      endpoints?: (components["schemas"]["BranchCreateRequestEndpointOptions"])[];
      branch?: {
        /** @description The `branch_id` of the parent branch */
        parent_id?: string;
        /** @description The branch name */
        name?: string;
        /** @description A Log Sequence Number (LSN) on the parent branch. The branch will be created with data from this LSN. */
        parent_lsn?: string;
        /**
         * Format: date-time 
         * @description A timestamp identifying a point in time on the parent branch. The branch will be created with data starting from this point in time.
         */
        parent_timestamp?: string;
      };
    };
    BranchUpdateRequest: {
      branch: {
        name?: string;
      };
    };
    BranchResponse: {
      branch: components["schemas"]["Branch"];
    };
    BranchesResponse: {
      branches: (components["schemas"]["Branch"])[];
    };
    ConnectionParameters: {
      /** @description Database name. */
      database: string;
      /** @description Password for the role. */
      password: string;
      /** @description Role name. */
      role: string;
      /** @description Host name. */
      host: string;
      /** @description Pooler host name. */
      pooler_host: string;
    };
    ConnectionDetails: {
      /**
       * @description Connection URI is same as specified in https://www.postgresql.org/docs/current/libpq-connect.html#id-1.7.3.8.3.6
       * It is a ready to use string for psql or for DATABASE_URL environment variable.
       */
      connection_uri: string;
      connection_parameters: components["schemas"]["ConnectionParameters"];
    };
    /**
     * @example {
     *   "host": "ep-silent-smoke-806639.us-east-2.aws.neon.tech",
     *   "id": "ep-silent-smoke-806639",
     *   "project_id": "spring-example-302709",
     *   "branch_id": "br-wispy-meadow-118737",
     *   "autoscaling_limit_min_cu": 1,
     *   "autoscaling_limit_max_cu": 1,
     *   "region_id": "aws-us-east-2",
     *   "type": "read_write",
     *   "current_state": "init",
     *   "pending_state": "active",
     *   "settings": {
     *     "pg_settings": {}
     *   },
     *   "pooler_enabled": false,
     *   "pooler_mode": "transaction",
     *   "disabled": false,
     *   "passwordless_access": true,
     *   "creation_source": "console",
     *   "created_at": "2022-12-03T15:37:07Z",
     *   "updated_at": "2022-12-03T15:37:07Z",
     *   "proxy_host": "us-east-2.aws.neon.tech",
     *   "suspend_timeout_seconds": 0
     * }
     */
    Endpoint: {
      /** @description The hostname of the compute endpoint. This is the hostname specified when connecting to a Neon database. */
      host: string;
      /** @description The compute endpoint ID. Compute endpoint IDs have an `ep-` prefix. For example: `ep-little-smoke-851426` */
      id: string;
      /** @description The ID of the project to which the compute endpoint belongs */
      project_id: string;
      /** @description The ID of the branch that the compute endpoint is associated with */
      branch_id: string;
      /** @description The minimum number of Compute Units */
      autoscaling_limit_min_cu: components["schemas"]["ComputeUnit"];
      /** @description The maximum number of Compute Units */
      autoscaling_limit_max_cu: components["schemas"]["ComputeUnit"];
      /** @description The region identifier */
      region_id: string;
      type: components["schemas"]["EndpointType"];
      current_state: components["schemas"]["EndpointState"];
      pending_state?: components["schemas"]["EndpointState"];
      settings: components["schemas"]["EndpointSettingsData"];
      /** @description Whether connection pooling is enabled for the compute endpoint */
      pooler_enabled: boolean;
      pooler_mode: components["schemas"]["EndpointPoolerMode"];
      /** @description Whether to restrict connections to the compute endpoint */
      disabled: boolean;
      /** @description Whether to permit passwordless access to the compute endpoint */
      passwordless_access: boolean;
      /**
       * Format: date-time 
       * @description A timestamp indicating when the compute endpoint was last active
       */
      last_active?: string;
      /** @description The compute endpoint creation source */
      creation_source: string;
      /**
       * Format: date-time 
       * @description A timestamp indicating when the compute endpoint was created
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description A timestamp indicating when the compute endpoint was last updated
       */
      updated_at: string;
      /** @description DEPRECATED. Use the "host" property instead. */
      proxy_host: string;
      suspend_timeout_seconds: components["schemas"]["SuspendTimeoutSeconds"];
      provisioner: components["schemas"]["Provisioner"];
    };
    /**
     * @description The state of the compute endpoint
     *  
     * @enum {string}
     */
    EndpointState: "init" | "active" | "idle";
    /**
     * @description The compute endpoint type. Either `read_write` or `read_only`.
     * The `read_only` compute endpoint type is not yet supported.
     *  
     * @enum {string}
     */
    EndpointType: "read_only" | "read_write";
    /**
     * @description The connection pooler mode. Neon supports PgBouncer in `transaction` mode only.
     *  
     * @enum {string}
     */
    EndpointPoolerMode: "transaction";
    /**
     * Format: int64 
     * @description Duration of inactivity in seconds after which the cimpute endpoint is
     * automatically suspended. The value `0` means use the global default.
     * The value `-1` means never suspend. The default value is `300` seconds (5 minutes).
     * The maximum value is `604800` seconds (1 week). For more information, see
     * [Auto-suspend configuration](https://neon.tech/docs/manage/endpoints#auto-suspend-configuration).
     */
    SuspendTimeoutSeconds: number;
    EndpointCreateRequest: {
      endpoint: {
        /** @description The ID of the branch the compute endpoint will be associated with */
        branch_id: string;
        /** @description The region where the compute endpoint will be created. Only the project's `region_id` is permitted. */
        region_id?: string;
        type: components["schemas"]["EndpointType"];
        settings?: components["schemas"]["EndpointSettingsData"];
        /**
         * @description The minimum number of Compute Units. The minimum value is `0.25`.
         * See [Compute size and Autoscaling configuration](https://neon.tech/docs/manage/endpoints#compute-size-and-autoscaling-configuration)
         * for more information.
         */
        autoscaling_limit_min_cu?: components["schemas"]["ComputeUnit"];
        /**
         * @description The maximum number of Compute Units.
         * See [Compute size and Autoscaling configuration](https://neon.tech/docs/manage/endpoints#compute-size-and-autoscaling-configuration)
         * for more information.
         */
        autoscaling_limit_max_cu?: components["schemas"]["ComputeUnit"];
        provisioner?: components["schemas"]["Provisioner"];
        /** @description Whether to enable connection pooling for the compute endpoint */
        pooler_enabled?: boolean;
        pooler_mode?: components["schemas"]["EndpointPoolerMode"];
        /** @description Whether to restrict connections to the compute endpoint */
        disabled?: boolean;
        /** @description NOT YET IMPLEMENTED. Whether to permit passwordless access to the compute endpoint. */
        passwordless_access?: boolean;
        suspend_timeout_seconds?: components["schemas"]["SuspendTimeoutSeconds"];
      };
    };
    EndpointUpdateRequest: {
      endpoint: {
        /** @description The destination branch ID. The destination branch must not have an exsiting read-write endpoint. */
        branch_id?: string;
        /**
         * @description The minimum number of Compute Units. The minimum value is `0.25`.
         * See [Compute size and Autoscaling configuration](https://neon.tech/docs/manage/endpoints#compute-size-and-autoscaling-configuration)
         * for more information.
         */
        autoscaling_limit_min_cu?: components["schemas"]["ComputeUnit"];
        /**
         * @description The maximum number of Compute Units.
         * See [Compute size and Autoscaling configuration](https://neon.tech/docs/manage/endpoints#compute-size-and-autoscaling-configuration)
         * for more information.
         */
        autoscaling_limit_max_cu?: components["schemas"]["ComputeUnit"];
        provisioner?: components["schemas"]["Provisioner"];
        settings?: components["schemas"]["EndpointSettingsData"];
        /** @description Whether to enable connection pooling for the compute endpoint */
        pooler_enabled?: boolean;
        pooler_mode?: components["schemas"]["EndpointPoolerMode"];
        /** @description Whether to restrict connections to the compute endpoint */
        disabled?: boolean;
        /** @description NOT YET IMPLEMENTED. Whether to permit passwordless access to the compute endpoint. */
        passwordless_access?: boolean;
        suspend_timeout_seconds?: components["schemas"]["SuspendTimeoutSeconds"];
      };
    };
    EndpointResponse: {
      endpoint: components["schemas"]["Endpoint"];
    };
    ConnectionURIsResponse: {
      connection_uris: (components["schemas"]["ConnectionDetails"])[];
    };
    ConnectionURIsOptionalResponse: {
      connection_uris?: (components["schemas"]["ConnectionDetails"])[];
    };
    ConnectionURIResponse: {
      connection_uri: components["schemas"]["ConnectionDetails"];
    };
    EndpointsResponse: {
      endpoints: (components["schemas"]["Endpoint"])[];
    };
    EndpointPasswordlessSessionAuthRequest: {
      session_id: string;
    };
    /**
     * Format: int64 
     * @description A Duration represents the elapsed time between two instants
     * as an int64 nanosecond count. The representation limits the
     * largest representable duration to approximately 290 years.
     */
    Duration: number;
    StatementResult: {
      data?: components["schemas"]["StatementData"];
      error?: string;
      explain_data?: (components["schemas"]["ExplainData"])[];
      query: string;
    };
    StatementData: {
      fields?: (string)[];
      rows?: ((string)[])[];
      truncated: boolean;
    };
    ExplainData: {
      "QUERY PLAN": string;
    };
    /**
     * @example {
     *   "branch_id": "br-wispy-meadow-118737",
     *   "name": "casey",
     *   "protected": false,
     *   "created_at": "2022-11-23T17:42:25Z",
     *   "updated_at": "2022-11-23T17:42:25Z"
     * }
     */
    Role: {
      /** @description The ID of the branch to which the role belongs */
      branch_id: string;
      /** @description The role name */
      name: string;
      /** @description The role password */
      password?: string;
      /** @description Whether or not the role is system-protected */
      protected?: boolean;
      /**
       * Format: date-time 
       * @description A timestamp indicating when the role was created
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description A timestamp indicating when the role was last updated
       */
      updated_at: string;
    };
    RoleCreateRequest: {
      role: {
        /** @description The role name. Cannot exceed 63 bytes in length. */
        name: string;
      };
    };
    RoleResponse: {
      role: components["schemas"]["Role"];
    };
    RolesResponse: {
      roles: (components["schemas"]["Role"])[];
    };
    RolePasswordResponse: {
      /** @description The role password */
      password: string;
    };
    PaymentSourceBankCard: {
      /** @description Last 4 digits of the card. */
      last4: string;
    };
    PaymentSource: {
      /** @description Type of payment source. E.g. "card". */
      type: string;
      card?: components["schemas"]["PaymentSourceBankCard"];
    };
    BillingAccount: {
      payment_source: components["schemas"]["PaymentSource"];
      subscription_type: components["schemas"]["BillingSubscriptionType"];
      /**
       * Format: date-time 
       * @description Last time when quota was reset. Defaults to current datetime when account is created.
       */
      quota_reset_at_last: string;
      /** @description Billing email, to receive emails related to invoices and subscriptions. */
      email: string;
      /** @description Billing address city. */
      address_city: string;
      /** @description Billing address country. */
      address_country: string;
      /** @description Billing address line 1. */
      address_line1: string;
      /** @description Billing address line 2. */
      address_line2: string;
      /** @description Billing address postal code. */
      address_postal_code: string;
      /** @description Billing address state or region. */
      address_state: string;
    };
    /**
     * @description Type of subscription to Neon Cloud.
     * Notice that for users without billing account this will be "UNKNOWN"
     *  
     * @enum {string}
     */
    BillingSubscriptionType: "UNKNOWN" | "free" | "pro" | "platform_partnership" | "enterprise";
    /**
     * @example {
     *   "id": 834686,
     *   "branch_id": "br-wispy-meadow-118737",
     *   "name": "neondb",
     *   "owner_name": "casey",
     *   "created_at": "2022-11-30T18:25:15Z",
     *   "updated_at": "2022-11-30T18:25:15Z"
     * }
     */
    Database: {
      /**
       * Format: int64 
       * @description The database ID
       */
      id: number;
      /** @description The ID of the branch to which the database belongs */
      branch_id: string;
      /** @description The database name */
      name: string;
      /** @description The name of role that owns the database */
      owner_name: string;
      /**
       * Format: date-time 
       * @description A timestamp indicating when the database was created
       */
      created_at: string;
      /**
       * Format: date-time 
       * @description A timestamp indicating when the database was last updated
       */
      updated_at: string;
    };
    DatabaseCreateRequest: {
      database: {
        /** @description The name of the datbase */
        name: string;
        /** @description The name of the role that owns the database */
        owner_name: string;
      };
    };
    DatabaseUpdateRequest: {
      database: {
        /** @description The name of the database */
        name?: string;
        /** @description The name of the role that owns the database */
        owner_name?: string;
      };
    };
    DatabaseResponse: {
      database: components["schemas"]["Database"];
    };
    DatabasesResponse: {
      databases: (components["schemas"]["Database"])[];
    };
    ConsoleSettingsRaw: {
      /** @description management */
      project_creation_forbidden?: boolean;
      proxy_host?: string;
    };
    CurrentUserAuthAccount: {
      email: string;
      image: string;
      login: string;
      name: string;
      provider: string;
    };
    CurrentUserInfoResponse: {
      /**
       * Format: int64 
       * @description Control plane observes active endpoints of a user this amount of wall-clock time.
       */
      active_seconds_limit: number;
      billing_account: components["schemas"]["BillingAccount"];
      auth_accounts: (components["schemas"]["CurrentUserAuthAccount"])[];
      email: string;
      id: string;
      image: string;
      login: string;
      name: string;
      /** Format: int64 */
      projects_limit: number;
      /** Format: int64 */
      branches_limit: number;
      max_autoscaling_limit: components["schemas"]["ComputeUnit"];
      /** Format: int64 */
      compute_seconds_limit?: number;
      plan: string;
    };
    /** @description A collection of settings for a compute endpoint */
    EndpointSettingsData: {
      pg_settings?: components["schemas"]["PgSettingsData"];
    };
    /**
     * @description Per-project consumption quota. If the quota is exceeded, all active computes
     * are automatically suspended and it will not be possible to start them with
     * an API method call or incoming proxy connections. The only exception is
     * `logical_size_bytes`, which is applied on per-branch basis, i.e., only the
     * compute on the branch that exceeds the `logical_size` quota will be suspended.
     * 
     * Quotas are enforced based on per-project consumption metrics with the same names,
     * which are reset at the end of each billing period (the first day of the month).
     * Logical size is also an exception in this case, as it represents the total size
     * of data stored in a branch, so it is not reset.
     * 
     * A zero or empty quota value means 'unlimited'.
     */
    ProjectQuota: {
      /**
       * Format: int64 
       * @description The total amount of wall-clock time allowed to be spent by the project's compute endpoints.
       */
      active_time_seconds?: number;
      /**
       * Format: int64 
       * @description The total amount of CPU seconds allowed to be spent by the project's compute endpoints.
       */
      compute_time_seconds?: number;
      /**
       * Format: int64 
       * @description Total amount of data written to all of a project's branches.
       */
      written_data_bytes?: number;
      /**
       * Format: int64 
       * @description Total amount of data transferred from all of a project's branches using the proxy.
       */
      data_transfer_bytes?: number;
      /**
       * Format: int64 
       * @description Limit on the logical size of every project's branch.
       */
      logical_size_bytes?: number;
    };
    /** @description A collection of settings for a Neon endpoint */
    DefaultEndpointSettings: {
      pg_settings?: components["schemas"]["PgSettingsData"];
    };
    /** @description A raw representation of PostgreSQL settings */
    PgSettingsData: {
      [key: string]: string | undefined;
    };
    /** @description The major PostgreSQL version number. Currently supported version are `14` and `15`. */
    PgVersion: number;
    /**
     * @example {
     *   "status": "ok"
     * }
     */
    HealthCheck: {
      /** @description Service status */
      status: string;
    };
    ProjectOwnerData: {
      email: string;
      branches_limit: number;
      subscription_type: components["schemas"]["BillingSubscriptionType"];
    };
    /** @description General Error */
    GeneralError: {
      code: components["schemas"]["ErrorCode"];
      /** @description Error message */
      message: string;
    };
    ErrorCode: string;
    ProjectOperations: components["schemas"]["ProjectResponse"] & components["schemas"]["OperationsResponse"];
    BranchOperations: components["schemas"]["BranchResponse"] & components["schemas"]["OperationsResponse"];
    EndpointOperations: components["schemas"]["EndpointResponse"] & components["schemas"]["OperationsResponse"];
    DatabaseOperations: components["schemas"]["DatabaseResponse"] & components["schemas"]["OperationsResponse"];
    RoleOperations: components["schemas"]["RoleResponse"] & components["schemas"]["OperationsResponse"];
  };
  responses: {
    /** @description Returned a list of operations */
    ListOperations: {
      content: {
        "application/json": components["schemas"]["OperationsResponse"] & components["schemas"]["PaginationResponse"];
      };
    };
    /**
     * @description Created a project.
     * The project includes a connection URI with a database, password, and role.
     * At least one non-protected role is created with a password.
     * Wait until the operations are finished before attempting to connect to a project database.
     */
    CreatedProject: {
      content: {
        "application/json": components["schemas"]["ProjectResponse"] & components["schemas"]["ConnectionURIsResponse"] & components["schemas"]["RolesResponse"] & components["schemas"]["DatabasesResponse"] & components["schemas"]["OperationsResponse"] & components["schemas"]["BranchResponse"] & components["schemas"]["EndpointsResponse"];
      };
    };
    /** @description Created a branch. An endpoint is only created if it was specified in the request. */
    CreatedBranch: {
      content: {
        "application/json": components["schemas"]["BranchResponse"] & components["schemas"]["EndpointsResponse"] & components["schemas"]["OperationsResponse"] & components["schemas"]["ConnectionURIsOptionalResponse"];
      };
    };
    /** @description General Error */
    GeneralError: {
      content: {
        "application/json": components["schemas"]["GeneralError"];
      };
    };
    /** @description Service is running */
    HealthCheck: {
      content: {
        "application/json": components["schemas"]["HealthCheck"];
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /**
   * Get a list of API keys 
   * @description Retrieves the API keys for your Neon account.
   * The response does not include API key tokens. A token is only provided when creating an API key.
   * API keys can also be managed in the Neon Console.
   * For more information, see [Manage API keys](https://neon.tech/docs/manage/api-keys/).
   */
  listApiKeys: {
    responses: {
      /** @description Returned the API keys for the Neon account */
      200: {
        content: {
          "application/json": (components["schemas"]["ApiKeysListResponseItem"])[];
        };
      };
      default: components["responses"]["GeneralError"];
    };
  };
  /**
   * Create an API key 
   * @description Creates an API key.
   * The `key_name` is a user-specified name for the key.
   * This method returns an `id` and `key`. The `key` is a randomly generated, 64-bit token required to access the Neon API.
   * API keys can also be managed in the Neon Console.
   * See [Manage API keys](https://neon.tech/docs/manage/api-keys/).
   */
  createApiKey: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "key_name": "mykey"
         * }
         */
        "application/json": components["schemas"]["ApiKeyCreateRequest"];
      };
    };
    responses: {
      /** @description Created an API key */
      200: {
        content: {
          "application/json": components["schemas"]["ApiKeyCreateResponse"];
        };
      };
      default: components["responses"]["GeneralError"];
    };
  };
  /**
   * Revoke an API key 
   * @description Revokes the specified API key.
   * An API key that is no longer needed can be revoked.
   * This action cannot be reversed.
   * You can obtain `key_id` values by listing the API keys for your Neon account.
   * API keys can also be managed in the Neon Console.
   * See [Manage API keys](https://neon.tech/docs/manage/api-keys/).
   */
  revokeApiKey: {
    parameters: {
      path: {
        /** @description The API key ID */
        key_id: number;
      };
    };
    responses: {
      /** @description Revoked the specified API key */
      200: {
        content: {
          "application/json": components["schemas"]["ApiKeyRevokeResponse"];
        };
      };
      default: components["responses"]["GeneralError"];
    };
  };
  /**
   * Get operation details 
   * @description Retrieves details for the specified operation.
   * An operation is an action performed on a Neon project resource.
   * You can obtain a `project_id` by listing the projects for your Neon account.
   * You can obtain a `operation_id` by listing operations for the project.
   */
  getProjectOperation: {
    parameters: {
      path: {
        /** @description The Neon project ID */
        project_id: string;
        /** @description The operation ID */
        operation_id: string;
      };
    };
    responses: {
      /** @description Returned details for the specified operation */
      200: {
        content: {
          "application/json": components["schemas"]["OperationResponse"];
        };
      };
      default: components["responses"]["GeneralError"];
    };
  };
  /**
   * Get a list of projects 
   * @description Retrieves a list of projects for the Neon account.
   * A project is the top-level object in the Neon object hierarchy.
   * For more information, see [Manage projects](https://neon.tech/docs/manage/projects/).
   */
  listProjects: {
    parameters: {
      query?: {
        /** @description Specify the cursor value from the previous response to get the next batch of projects. */
        cursor?: string;
        /** @description Specify a value from 1 to 100 to limit number of projects in the response. */
        limit?: number;
      };
    };
    responses: {
      /** @description Returned a list of projects for the Neon account */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectsResponse"] & components["schemas"]["PaginationResponse"];
        };
      };
      default: components["responses"]["GeneralError"];
    };
  };
  /**
   * Create a project 
   * @description Creates a Neon project.
   * A project is the top-level object in the Neon object hierarchy.
   * Plan limits define how many projects you can create.
   * Neon's Free plan permits one project per Neon account.
   * For more information, see [Manage projects](https://neon.tech/docs/manage/projects/).
   * 
   * You can specify a region and PostgreSQL version in the request body.
   * Neon currently supports PostgreSQL 14 and 15.
   * For supported regions and `region_id` values, see [Regions](https://neon.tech/docs/introduction/regions/).
   */
  createProject: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProjectCreateRequest"];
      };
    };
    responses: {
      201: components["responses"]["CreatedProject"];
      default: components["responses"]["GeneralError"];
    };
  };
  /**
   * Get project details 
   * @description Retrieves information about the specified project.
   * A project is the top-level object in the Neon object hierarchy.
   * You can obtain a `project_id` by listing the projects for your Neon account.
   */
  getProject: {
    parameters: {
      path: {
        /** @description The Neon project ID */
        project_id: string;
      };
    };
    responses: {
      /** @description Returned information about the specified project */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectResponse"];
        };
      };
      default: components["responses"]["GeneralError"];
    };
  };
  /**
   * Delete a project 
   * @description Deletes the specified project.
   * You can obtain a `project_id` by listing the projects for your Neon account.
   * Deleting a project is a permanent action.
   * Deleting a project also deletes endpoints, branches, databases, and users that belong to the project.
   */
  deleteProject: {
    parameters: {
      path: {
        /** @description The Neon project ID */
        project_id: string;
      };
    };
    responses: {
      /** @description Deleted the specified project */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectResponse"];
        };
      };
      default: components["responses"]["GeneralError"];
    };
  };
  /**
   * Update a project 
   * @description Updates the specified project.
   * You can obtain a `project_id` by listing the projects for your Neon account.
   * Neon permits updating the project name only.
   */
  updateProject: {
    parameters: {
      path: {
        /** @description The Neon project ID */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "project": {
         *     "name": "myproject"
         *   }
         * }
         */
        "application/json": components["schemas"]["ProjectUpdateRequest"];
      };
    };
    responses: {
      /** @description Updated the specified project */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectOperations"];
        };
      };
      default: components["responses"]["GeneralError"];
    };
  };
  /**
   * Get a list of operations 
   * @description Retrieves a list of operations for the specified Neon project.
   * You can obtain a `project_id` by listing the projects for your Neon account.
   * The number of operations returned can be large.
   * To paginate the response, issue an initial request with a `limit` value.
   * Then, add the `cursor` value that was returned in the response to the next request.
   */
  listProjectOperations: {
    parameters: {
      query?: {
        /** @description Specify the cursor value from the previous response to get the next batch of operations */
        cursor?: string;
        /** @description Specify a value from 1 to 1000 to limit number of operations in the response */
        limit?: number;
      };
      path: {
        /** @description The Neon project ID */
        project_id: string;
      };
    };
    responses: {
      200: components["responses"]["ListOperations"];
      default: components["responses"]["GeneralError"];
    };
  };
  /**
   * Get a list of branches 
   * @description Retrieves a list of branches for the specified project.
   * You can obtain a `project_id` by listing the projects for your Neon account.
   * 
   * Each Neon project has a root branch named `main`.
   * A `branch_id` value has a `br-` prefix.
   * A project may contain child branches that were branched from `main` or from another branch.
   * A parent branch is identified by the `parent_id` value, which is the `id` of the parent branch.
   * For related information, see [Manage branches](https://neon.tech/docs/manage/branches/).
   */
  listProjectBranches: {
    parameters: {
      path: {
        /** @description The Neon project ID */
        project_id: string;
      };
    };
    responses: {
      /** @description Returned a list of branches for the specified project */
      200: {
        content: {
          "application/json": components["schemas"]["BranchesResponse"];
        };
      };
      default: components["responses"]["GeneralError"];
    };
  };
  /**
   * Create a branch 
   * @description Creates a branch in the specified project.
   * You can obtain a `project_id` by listing the projects for your Neon account.
   * 
   * This method does not require a request body, but you can specify one to create an endpoint for the branch or to select a non-default parent branch.
   * The default behavior is to create a branch from the project's root branch (`main`) with no endpoint, and the branch name is auto-generated.
   * For related information, see [Manage branches](https://neon.tech/docs/manage/branches/).
   */
  createProjectBranch: {
    parameters: {
      path: {
        /** @description The Neon project ID */
        project_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["BranchCreateRequest"];
      };
    };
    responses: {
      201: components["responses"]["CreatedBranch"];
      default: components["responses"]["GeneralError"];
    };
  };
  /**
   * Get branch details 
   * @description Retrieves information about the specified branch.
   * You can obtain a `project_id` by listing the projects for your Neon account.
   * You can obtain a `branch_id` by listing the project's branches.
   * A `branch_id` value has a `br-` prefix.
   * 
   * Each Neon project has a root branch named `main`.
   * A project may contain child branches that were branched from `main` or from another branch.
   * A parent branch is identified by a `parent_id` value, which is the `id` of the parent branch.
   * For related information, see [Manage branches](https://neon.tech/docs/manage/branches/).
   */
  getProjectBranch: {
    parameters: {
      path: {
        /** @description The Neon project ID */
        project_id: string;
        /** @description The branch ID */
        branch_id: string;
      };
    };
    responses: {
      /** @description Returned information about the specified branch */
      200: {
        content: {
          "application/json": components["schemas"]["BranchResponse"];
        };
      };
      default: components["responses"]["GeneralError"];
    };
  };
  /**
   * Delete a branch 
   * @description Deletes the specified branch from a project, and places
   * all endpoints into an idle state, breaking existing client connections.
   * You can obtain a `project_id` by listing the projects for your Neon account.
   * You can obtain a `branch_id` by listing the project's branches.
   * For related information, see [Manage branches](https://neon.tech/docs/manage/branches/).
   * 
   * When a successful response status is received, the endpoints are still active,
   * and the branch is not yet deleted from storage.
   * The deletion occurs after all operations finish.
   * You cannot delete a branch if it is the only remaining branch in the project.
   * A project must have at least one branch.
   */
  deleteProjectBranch: {
    parameters: {
      path: {
        /** @description The Neon project ID */
        project_id: string;
        /** @description The branch ID */
        branch_id: string;
      };
    };
    responses: {
      /** @description Deleted the specified branch */
      200: {
        content: {
          "application/json": components["schemas"]["BranchOperations"];
        };
      };
      default: components["responses"]["GeneralError"];
    };
  };
  /**
   * Update a branch 
   * @description Updates the specified branch. Only changing the branch name is supported.
   * You can obtain a `project_id` by listing the projects for your Neon account.
   * You can obtain the `branch_id` by listing the project's branches.
   * For more information, see [Manage branches](https://neon.tech/docs/manage/branches/).
   */
  updateProjectBranch: {
    parameters: {
      path: {
        /** @description The Neon project ID */
        project_id: string;
        /** @description The branch ID */
        branch_id: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "branch": {
         *     "name": "mybranch"
         *   }
         * }
         */
        "application/json": components["schemas"]["BranchUpdateRequest"];
      };
    };
    responses: {
      /** @description Updated the specified branch */
      200: {
        content: {
          "application/json": components["schemas"]["BranchOperations"];
        };
      };
      default: components["responses"]["GeneralError"];
    };
  };
  /**
   * Set the branch as the primary branch of a project 
   * @description The primary mark is automatically removed from the previous primary branch.
   * You can obtain a `project_id` by listing the projects for your Neon account.
   * You can obtain the `branch_id` by listing the project's branches.
   * For more information, see [Manage branches](https://neon.tech/docs/manage/branches/).
   */
  setPrimaryProjectBranch: {
    parameters: {
      path: {
        /** @description The Neon project ID */
        project_id: string;
        /** @description The branch ID */
        branch_id: string;
      };
    };
    responses: {
      /** @description Updated the specified branch */
      200: {
        content: {
          "application/json": components["schemas"]["BranchOperations"];
        };
      };
      default: components["responses"]["GeneralError"];
    };
  };
  /**
   * Get a list of branch endpoints 
   * @description Retrieves a list of endpoints for the specified branch.
   * Currently, Neon permits only one endpoint per branch.
   * You can obtain a `project_id` by listing the projects for your Neon account.
   * You can obtain the `branch_id` by listing the project's branches.
   */
  listProjectBranchEndpoints: {
    parameters: {
      path: {
        /** @description The Neon project ID */
        project_id: string;
        /** @description The branch ID */
        branch_id: string;
      };
    };
    responses: {
      /** @description Returned a list of endpoints for the specified branch */
      200: {
        content: {
          "application/json": components["schemas"]["EndpointsResponse"];
        };
      };
      default: components["responses"]["GeneralError"];
    };
  };
  /**
   * Get a list of databases 
   * @description Retrieves a list of databases for the specified branch.
   * A branch can have multiple databases.
   * You can obtain a `project_id` by listing the projects for your Neon account.
   * You can obtain the `branch_id` by listing the project's branches.
   * For related information, see [Manage databases](https://neon.tech/docs/manage/databases/).
   */
  listProjectBranchDatabases: {
    parameters: {
      path: {
        /** @description The Neon project ID */
        project_id: string;
        /** @description The branch ID */
        branch_id: string;
      };
    };
    responses: {
      /** @description Returned a list of databases of the specified branch */
      200: {
        content: {
          "application/json": components["schemas"]["DatabasesResponse"];
        };
      };
      default: components["responses"]["GeneralError"];
    };
  };
  /**
   * Create a database 
   * @description Creates a database in the specified branch.
   * A branch can have multiple databases.
   * You can obtain a `project_id` by listing the projects for your Neon account.
   * You can obtain the `branch_id` by listing the project's branches.
   * For related information, see [Manage databases](https://neon.tech/docs/manage/databases/).
   */
  createProjectBranchDatabase: {
    parameters: {
      path: {
        /** @description The Neon project ID */
        project_id: string;
        /** @description The branch ID */
        branch_id: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "database": {
         *     "name": "mydb",
         *     "owner_name": "casey"
         *   }
         * }
         */
        "application/json": components["schemas"]["DatabaseCreateRequest"];
      };
    };
    responses: {
      /** @description Created a database in the specified branch */
      201: {
        content: {
          "application/json": components["schemas"]["DatabaseOperations"];
        };
      };
      default: components["responses"]["GeneralError"];
    };
  };
  /**
   * Get database details 
   * @description Retrieves information about the specified database.
   * You can obtain a `project_id` by listing the projects for your Neon account.
   * You can obtain the `branch_id` and `database_name` by listing branch's databases.
   * For related information, see [Manage databases](https://neon.tech/docs/manage/databases/).
   */
  getProjectBranchDatabase: {
    parameters: {
      path: {
        /** @description The Neon project ID */
        project_id: string;
        /** @description The branch ID */
        branch_id: string;
        /** @description The database name */
        database_name: string;
      };
    };
    responses: {
      /** @description Returned the database details */
      200: {
        content: {
          "application/json": components["schemas"]["DatabaseResponse"];
        };
      };
      default: components["responses"]["GeneralError"];
    };
  };
  /**
   * Delete a database 
   * @description Deletes the specified database from the branch.
   * You can obtain a `project_id` by listing the projects for your Neon account.
   * You can obtain the `branch_id` and `database_name` by listing branch's databases.
   * For related information, see [Manage databases](https://neon.tech/docs/manage/databases/).
   */
  deleteProjectBranchDatabase: {
    parameters: {
      path: {
        /** @description The Neon project ID */
        project_id: string;
        /** @description The branch ID */
        branch_id: string;
        /** @description The database name */
        database_name: string;
      };
    };
    responses: {
      /** @description Deleted the specified database */
      200: {
        content: {
          "application/json": components["schemas"]["DatabaseOperations"];
        };
      };
      default: components["responses"]["GeneralError"];
    };
  };
  /**
   * Update a database 
   * @description Updates the specified database in the branch.
   * You can obtain a `project_id` by listing the projects for your Neon account.
   * You can obtain the `branch_id` and `database_name` by listing the branch's databases.
   * For related information, see [Manage databases](https://neon.tech/docs/manage/databases/).
   */
  updateProjectBranchDatabase: {
    parameters: {
      path: {
        /** @description The Neon project ID */
        project_id: string;
        /** @description The branch ID */
        branch_id: string;
        /** @description The database name */
        database_name: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "database": {
         *     "name": "mydb",
         *     "owner_name": "sally"
         *   }
         * }
         */
        "application/json": components["schemas"]["DatabaseUpdateRequest"];
      };
    };
    responses: {
      /** @description Updated the database */
      200: {
        content: {
          "application/json": components["schemas"]["DatabaseOperations"];
        };
      };
      default: components["responses"]["GeneralError"];
    };
  };
  /**
   * Get a list of roles 
   * @description Retrieves a list of roles from the specified branch.
   * You can obtain a `project_id` by listing the projects for your Neon account.
   * You can obtain the `branch_id` by listing the project's branches.
   * In Neon, the terms "role" and "user" are synonymous.
   * For related information, see [Manage roles](https://neon.tech/docs/manage/roles/).
   */
  listProjectBranchRoles: {
    parameters: {
      path: {
        /** @description The Neon project ID */
        project_id: string;
        /** @description The branch ID */
        branch_id: string;
      };
    };
    responses: {
      /** @description Returned a list of roles from the specified branch. */
      200: {
        content: {
          "application/json": components["schemas"]["RolesResponse"];
        };
      };
      default: components["responses"]["GeneralError"];
    };
  };
  /**
   * Create a role 
   * @description Creates a role in the specified branch.
   * You can obtain a `project_id` by listing the projects for your Neon account.
   * You can obtain the `branch_id` by listing the project's branches.
   * In Neon, the terms "role" and "user" are synonymous.
   * For related information, see [Manage roles](https://neon.tech/docs/manage/roles/).
   * 
   * Connections established to the active read-write endpoint will be dropped.
   * If the read-write endpoint is idle, the endpoint becomes active for a short period of time and is suspended afterward.
   */
  createProjectBranchRole: {
    parameters: {
      path: {
        /** @description The Neon project ID */
        project_id: string;
        /** @description The branch ID */
        branch_id: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "role": {
         *     "name": "sally"
         *   }
         * }
         */
        "application/json": components["schemas"]["RoleCreateRequest"];
      };
    };
    responses: {
      /** @description Created a role in the specified branch */
      201: {
        content: {
          "application/json": components["schemas"]["RoleOperations"];
        };
      };
      default: components["responses"]["GeneralError"];
    };
  };
  /**
   * Get role details 
   * @description Retrieves details about the specified role.
   * You can obtain a `project_id` by listing the projects for your Neon account.
   * You can obtain the `branch_id` by listing the project's branches.
   * You can obtain the `role_name` by listing the roles for a branch.
   * In Neon, the terms "role" and "user" are synonymous.
   * For related information, see [Manage roles](https://neon.tech/docs/manage/roles/).
   */
  getProjectBranchRole: {
    parameters: {
      path: {
        /** @description The Neon project ID */
        project_id: string;
        /** @description The branch ID */
        branch_id: string;
        /** @description The role name */
        role_name: string;
      };
    };
    responses: {
      /** @description Successfully returned details for the specified role */
      200: {
        content: {
          "application/json": components["schemas"]["RoleResponse"];
        };
      };
      default: components["responses"]["GeneralError"];
    };
  };
  /**
   * Delete a role 
   * @description Deletes the specified role from the branch.
   * You can obtain a `project_id` by listing the projects for your Neon account.
   * You can obtain the `branch_id` by listing the project's branches.
   * You can obtain the `role_name` by listing the roles for a branch.
   * In Neon, the terms "role" and "user" are synonymous.
   * For related information, see [Manage roles](https://neon.tech/docs/manage/roles/).
   */
  deleteProjectBranchRole: {
    parameters: {
      path: {
        /** @description The Neon project ID */
        project_id: string;
        /** @description The branch ID */
        branch_id: string;
        /** @description The role name */
        role_name: string;
      };
    };
    responses: {
      /** @description Deleted the specified role from the branch */
      200: {
        content: {
          "application/json": components["schemas"]["RoleOperations"];
        };
      };
      default: components["responses"]["GeneralError"];
    };
  };
  /**
   * Get role password 
   * @description Retrieves password of the specified role if possible.
   * You can obtain a `project_id` by listing the projects for your Neon account.
   * You can obtain the `branch_id` by listing the project's branches.
   * You can obtain the `role_name` by listing the roles for a branch.
   * In Neon, the terms "role" and "user" are synonymous.
   * For related information, see [Manage roles](https://neon.tech/docs/manage/roles/).
   */
  getProjectBranchRolePassword: {
    parameters: {
      path: {
        /** @description The Neon project ID */
        project_id: string;
        /** @description The branch ID */
        branch_id: string;
        /** @description The role name */
        role_name: string;
      };
    };
    responses: {
      /** @description Successfully returned password for the specified role */
      200: {
        content: {
          "application/json": components["schemas"]["RolePasswordResponse"];
        };
      };
      /** @description Role not found */
      404: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      /** @description Storing passwords is disabled */
      412: {
        content: {
          "application/json": components["schemas"]["GeneralError"];
        };
      };
      default: components["responses"]["GeneralError"];
    };
  };
  /**
   * Reset the role password 
   * @description Resets the password for the specified role.
   * Returns a new password and operations. The new password is ready to use when the last operation finishes.
   * The old password remains valid until last operation finishes.
   * Connections to the read-write endpoint are dropped. If idle,
   * the read-write endpoint becomes active for a short period of time.
   * 
   * You can obtain a `project_id` by listing the projects for your Neon account.
   * You can obtain the `branch_id` by listing the project's branches.
   * You can obtain the `role_name` by listing the roles for a branch.
   * In Neon, the terms "role" and "user" are synonymous.
   * For related information, see [Manage roles](https://neon.tech/docs/manage/roles/).
   */
  resetProjectBranchRolePassword: {
    parameters: {
      path: {
        /** @description The Neon project ID */
        project_id: string;
        /** @description The branch ID */
        branch_id: string;
        /** @description The role nam */
        role_name: string;
      };
    };
    responses: {
      /** @description Reset the passsword for the specified role */
      200: {
        content: {
          "application/json": components["schemas"]["RoleOperations"];
        };
      };
      default: components["responses"]["GeneralError"];
    };
  };
  /**
   * Get a list of endpoints 
   * @description Retrieves a list of endpoints for the specified project.
   * An endpoint is a Neon compute instance.
   * You can obtain a `project_id` by listing the projects for your Neon account.
   * For more information about endpoints, see [Manage endpoints](https://neon.tech/docs/manage/endpoints/).
   */
  listProjectEndpoints: {
    parameters: {
      path: {
        /** @description The Neon project ID */
        project_id: string;
      };
    };
    responses: {
      /** @description Returned a list of endpoints for the specified project */
      200: {
        content: {
          "application/json": components["schemas"]["EndpointsResponse"];
        };
      };
      default: components["responses"]["GeneralError"];
    };
  };
  /**
   * Create an endpoint 
   * @description Creates an endpoint for the specified branch.
   * An endpoint is a Neon compute instance.
   * There is a maximum of one endpoint per branch.
   * If the specified branch already has an endpoint, the operation fails.
   * 
   * You can obtain a `project_id` by listing the projects for your Neon account.
   * You can obtain `branch_id` by listing the project's branches.
   * A `branch_id` has a `br-` prefix.
   * Currently, only the `read_write` endpoint type is supported.
   * For supported regions and `region_id` values, see [Regions](https://neon.tech/docs/introduction/regions/).
   * For more information about endpoints, see [Manage endpoints](https://neon.tech/docs/manage/endpoints/).
   */
  createProjectEndpoint: {
    parameters: {
      path: {
        /** @description The Neon project ID */
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EndpointCreateRequest"];
      };
    };
    responses: {
      /** @description Created an endpoint */
      201: {
        content: {
          "application/json": components["schemas"]["EndpointOperations"];
        };
      };
      default: components["responses"]["GeneralError"];
    };
  };
  /**
   * Get an endpoint 
   * @description Retrieves information about the specified endpoint.
   * An endpoint is a Neon compute instance.
   * You can obtain a `project_id` by listing the projects for your Neon account.
   * You can obtain an `endpoint_id` by listing your project's endpoints.
   * An `endpoint_id` has an `ep-` prefix.
   * For more information about endpoints, see [Manage endpoints](https://neon.tech/docs/manage/endpoints/).
   */
  getProjectEndpoint: {
    parameters: {
      path: {
        /** @description The Neon project ID */
        project_id: string;
        /** @description The endpoint ID */
        endpoint_id: string;
      };
    };
    responses: {
      /** @description Returned information about the specified endpoint */
      200: {
        content: {
          "application/json": components["schemas"]["EndpointResponse"];
        };
      };
      default: components["responses"]["GeneralError"];
    };
  };
  /**
   * Delete an endpoint 
   * @description Delete the specified endpoint.
   * An endpoint is a Neon compute instance.
   * Deleting an endpoint drops existing network connections to the endpoint.
   * The deletion is completed when last operation in the chain finishes successfully.
   * 
   * You can obtain a `project_id` by listing the projects for your Neon account.
   * You can obtain an `endpoint_id` by listing your project's endpoints.
   * An `endpoint_id` has an `ep-` prefix.
   * For more information about endpoints, see [Manage endpoints](https://neon.tech/docs/manage/endpoints/).
   */
  deleteProjectEndpoint: {
    parameters: {
      path: {
        /** @description The Neon project ID */
        project_id: string;
        /** @description The endpoint ID */
        endpoint_id: string;
      };
    };
    responses: {
      /** @description Deleted the specified endpoint */
      200: {
        content: {
          "application/json": components["schemas"]["EndpointOperations"];
        };
      };
      default: components["responses"]["GeneralError"];
    };
  };
  /**
   * Update an endpoint 
   * @description Updates the specified endpoint. Currently, only changing the associated branch is supported.
   * The branch that you specify cannot have an existing endpoint.
   * 
   * You can obtain a `project_id` by listing the projects for your Neon account.
   * You can obtain an `endpoint_id` and `branch_id` by listing your project's endpoints.
   * An `endpoint_id` has an `ep-` prefix. A `branch_id` has a `br-` prefix.
   * For more information about endpoints, see [Manage endpoints](https://neon.tech/docs/manage/endpoints/).
   * 
   * If the returned list of operations is not empty, the endpoint is not ready to use.
   * The client must wait for the last operation to finish before using the endpoint.
   * If the endpoint was idle before the update, the endpoint becomes active for a short period of time,
   * and the control plane suspends it again after the update.
   */
  updateProjectEndpoint: {
    parameters: {
      path: {
        /** @description The Neon project ID */
        project_id: string;
        /** @description The endpoint ID */
        endpoint_id: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "endpoint": {
         *     "branch_id": "br-tiny-grass-283160"
         *   }
         * }
         */
        "application/json": components["schemas"]["EndpointUpdateRequest"];
      };
    };
    responses: {
      /** @description Updated the specified endpoint */
      200: {
        content: {
          "application/json": components["schemas"]["EndpointOperations"];
        };
      };
      default: components["responses"]["GeneralError"];
    };
  };
  /**
   * Start an endpoint 
   * @description Starts an endpoint. The endpoint is ready to use
   * after the last operation in chain finishes successfully.
   * 
   * You can obtain a `project_id` by listing the projects for your Neon account.
   * You can obtain an `endpoint_id` by listing your project's endpoints.
   * An `endpoint_id` has an `ep-` prefix.
   * For more information about endpoints, see [Manage endpoints](https://neon.tech/docs/manage/endpoints/).
   */
  startProjectEndpoint: {
    parameters: {
      path: {
        /** @description The Neon project ID */
        project_id: string;
        /** @description The endpoint ID */
        endpoint_id: string;
      };
    };
    responses: {
      /** @description Started the specified endpoint */
      200: {
        content: {
          "application/json": components["schemas"]["EndpointOperations"];
        };
      };
      default: components["responses"]["GeneralError"];
    };
  };
  /**
   * Suspend an endpoint 
   * @description Suspend the specified endpoint
   * You can obtain a `project_id` by listing the projects for your Neon account.
   * You can obtain an `endpoint_id` by listing your project's endpoints.
   * An `endpoint_id` has an `ep-` prefix.
   * For more information about endpoints, see [Manage endpoints](https://neon.tech/docs/manage/endpoints/).
   */
  suspendProjectEndpoint: {
    parameters: {
      path: {
        /** @description The Neon project ID */
        project_id: string;
        /** @description The endpoint ID */
        endpoint_id: string;
      };
    };
    responses: {
      /** @description Suspended the specified endpoint */
      200: {
        content: {
          "application/json": components["schemas"]["EndpointOperations"];
        };
      };
      default: components["responses"]["GeneralError"];
    };
  };
  /**
   * Rerives a list consumption metrics for each project 
   * @description This is a preview API and is subject to changes in the future.
   * 
   * Retrieves a list project consumption metrics for each project for the current billing period.
   */
  listProjectsConsumption: {
    parameters: {
      query?: {
        /** @description Specify the cursor value from the previous response to get the next batch of projects. */
        cursor?: string;
        /** @description Specify a value from 1 to 1000 to limit number of projects in the response. */
        limit?: number;
      };
    };
    responses: {
      /** @description Returned a list of project consumption metrics for the Neon account */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectsConsumptionResponse"] & components["schemas"]["PaginationResponse"];
        };
      };
      default: components["responses"]["GeneralError"];
    };
  };
}
